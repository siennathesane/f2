#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

const DOCS_DIR = path.join(__dirname, '../assets/docs');
const OUTPUT_FILE = path.join(__dirname, '../src/docs-registry.generated.ts');

function scanDirectory(dir, baseDir = dir) {
    const items = [];
    const entries = fs.readdirSync(dir, { withFileTypes: true });

    for (const entry of entries) {
        const fullPath = path.join(dir, entry.name);
        const relativePath = path.relative(baseDir, fullPath);

        if (entry.isDirectory()) {
            items.push(...scanDirectory(fullPath, baseDir));
        } else if (entry.isFile() && entry.name.endsWith('.md')) {
            const slug = relativePath
                .replace(/\.md$/, '')
                .replace(/\\/g, '/') // Normalize path separators
                .replace(/\/index$/, '') // Convert 'workflows/index' to 'workflows'
                .replace(/^index$/, 'home'); // Convert root 'index' to 'home'

            // Create a category from the folder structure
            const pathParts = relativePath.split(/[\/\\]/);
            const category = pathParts.length > 1 ? pathParts[0] : 'general';

            items.push({
                slug,
                filePath: relativePath.replace(/\\/g, '/'),
                category,
                requirePath: `../assets/docs/${relativePath.replace(/\\/g, '/')}`
            });
        }
    }

    return items;
}

function generateRegistry() {
    if (!fs.existsSync(DOCS_DIR)) {
        console.warn('Docs directory not found, creating empty registry');
        const emptyRegistry = `// Auto-generated docs registry
export const docsModules = {};
export const docsMetadata = [];
`;
        fs.writeFileSync(OUTPUT_FILE, emptyRegistry);
        return;
    }

    const docs = scanDirectory(DOCS_DIR);

    // Generate TypeScript imports and registry
    const imports = docs.map(doc =>
        `import ${doc.slug.replace(/[^a-zA-Z0-9]/g, '_')} from '${doc.requirePath}';`
    ).join('\n');

    const moduleEntries = docs.map(doc =>
        `  '${doc.slug}': ${doc.slug.replace(/[^a-zA-Z0-9]/g, '_')}`
    ).join(',\n');

    const metadataEntries = docs.map(doc => `  {
    slug: '${doc.slug}',
    filePath: '${doc.filePath}',
    category: '${doc.category}'
  }`).join(',\n');

    const registryContent = `// Auto-generated docs registry
// This file is generated by scripts/generate-docs-registry.js during prebuild

${imports}

export const docsModules = {
${moduleEntries}
};

export const docsMetadata = [
${metadataEntries}
];

export type DocMetadata = {
  slug: string;
  filePath: string;
  category: string;
};
`;

    // Ensure src directory exists
    const srcDir = path.dirname(OUTPUT_FILE);
    if (!fs.existsSync(srcDir)) {
        fs.mkdirSync(srcDir, { recursive: true });
    }

    fs.writeFileSync(OUTPUT_FILE, registryContent);
    console.log(`Generated docs registry with ${docs.length} documents:`);
    docs.forEach(doc => console.log(`  - ${doc.slug} (${doc.category})`));
}

// Create src directory if it doesn't exist
const srcDir = path.join(__dirname, '../src');
if (!fs.existsSync(srcDir)) {
    fs.mkdirSync(srcDir, { recursive: true });
}

generateRegistry();