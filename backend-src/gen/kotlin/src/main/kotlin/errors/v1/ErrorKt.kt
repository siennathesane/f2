// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: f2/errors/v1/errors.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package errors.v1;

@kotlin.jvm.JvmName("-initializeerror")
public inline fun error(block: errors.v1.ErrorKt.Dsl.() -> kotlin.Unit): errors.v1.Error =
  errors.v1.ErrorKt.Dsl._create(errors.v1.Error.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `f2.errors.v1.Error`
 */
public object ErrorKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: errors.v1.Error.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: errors.v1.Error.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): errors.v1.Error = _builder.build()

    /**
     * `.f2.errors.v1.ErrorCode code = 1 [json_name = "code"];`
     */
    public var code: errors.v1.ErrorCode
      @JvmName("getCode")
      get() = _builder.code
      @JvmName("setCode")
      set(value) {
        _builder.code = value
      }
    public var codeValue: kotlin.Int
      @JvmName("getCodeValue")
      get() = _builder.codeValue
      @JvmName("setCodeValue")
      set(value) {
        _builder.codeValue = value
      }
    /**
     * `.f2.errors.v1.ErrorCode code = 1 [json_name = "code"];`
     */
    public fun clearCode() {
      _builder.clearCode()
    }

    /**
     * `string message = 2 [json_name = "message"];`
     */
    public var message: kotlin.String
      @JvmName("getMessage")
      get() = _builder.message
      @JvmName("setMessage")
      set(value) {
        _builder.message = value
      }
    /**
     * `string message = 2 [json_name = "message"];`
     */
    public fun clearMessage() {
      _builder.clearMessage()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun errors.v1.Error.copy(block: `errors.v1`.ErrorKt.Dsl.() -> kotlin.Unit): errors.v1.Error =
  `errors.v1`.ErrorKt.Dsl._create(this.toBuilder()).apply { block() }._build()

